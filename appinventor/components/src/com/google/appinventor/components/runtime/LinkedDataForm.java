package com.google.appinventor.components.runtime;

import static com.google.appinventor.components.common.ComponentConstants.LAYOUT_ORIENTATION_VERTICAL;

import android.util.Log;
import com.google.appinventor.components.annotations.DesignerComponent;
import com.google.appinventor.components.annotations.DesignerProperty;
import com.google.appinventor.components.annotations.PropertyCategory;
import com.google.appinventor.components.annotations.SimpleFunction;
import com.google.appinventor.components.annotations.SimpleObject;
import com.google.appinventor.components.annotations.SimpleProperty;
import com.google.appinventor.components.annotations.UsesLibraries;
import com.google.appinventor.components.common.ComponentCategory;
import com.google.appinventor.components.common.PropertyTypeConstants;
import com.google.appinventor.components.common.SemanticWebConstants;
import com.google.appinventor.components.common.YaVersion;
import com.google.appinventor.components.runtime.util.RdfUtil;
import java.util.UUID;

/**
 * Linked Data Form provides a layout in which contained form elements will be
 * used to generate structured data. This form is used in conjunction with
 * the LinkedData component.
 * 
 * @see LinkedData
 * @author Evan W. Patton <ewpatton@gmail.com>
 *
 */
@DesignerComponent(version = YaVersion.LINKED_DATA_FORM_COMPONENT_VERSION,
    description = "A layout that provides linked data enhancement of captured data.",
    category = ComponentCategory.LINKEDDATA)
@UsesLibraries(libraries = "xercesImpl.jar," + 
    "slf4j-android.jar," + "jena-iri.jar," + "jena-core.jar," +
    "jena-arq.jar")
@SimpleObject
public class LinkedDataForm extends HVArrangement {

  private static final String LOG_TAG = LinkedDataForm.class.getSimpleName();

  /**
   * String storing the URI of the concept used to type instances created with this form.
   */
  private String concept;

  /**
   * Stores the base URI used for naming new resources generated by this form.
   */
  private String baseUri;

  private String property;

  private String subject;

  private boolean inverse;

  /**
   * Creates a new linked data form in the specified container.
   *
   * @param container the component containing this form
   */
  public LinkedDataForm(ComponentContainer<AndroidViewComponent> container) {
    super(container, LAYOUT_ORIENTATION_VERTICAL, false);
    concept = "";
    baseUri = SemanticWebConstants.DEFAULT_BASE_URI;
    property = "";
    Log.d(LOG_TAG, "Created linked data form");
  }

  /**
   * Sets the concept URI to type objects encoded by this form.
   *
   * @param uri the concept represented by the form
   */
  @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_CONCEPT_URI)
  @SimpleProperty
  public void ObjectType(String uri) {
    concept = uri;
  }

  /**
   * Returns the concept URI for this form.
   *
   * @return the concept represented by the form
   */
  @SimpleProperty(category = PropertyCategory.LINKED_DATA,
      description = "<p>When the contents of this form are turned into an "
          + "object description, the Uniform Resource Identifier (URI) "
          + "supplied for Object Type is used to identify the type of the "
          + "object.</p><p>For example, setting Object Type to "
          + "<code>http://xmlns.com/foaf/0.1/Person</code> (foaf:Person) will "
          + "identify the object on the web as a description of a person. This"
          + "allows other tools that understand foaf:Person to reuse data "
          + "generated by the form.</p>")
  public String ObjectType() {
    return concept;
  }

  /**
   * Sets the Base URI used for generating new subject identifiers
   * @param uri URI ending in # or /
   */
  @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BASEURI_AUTOGEN,
      defaultValue = SemanticWebConstants.DEFAULT_BASE_URI)
  @SimpleProperty
  public void FormID(String uri) {
    baseUri = uri;
  }

  /**
   * Gets the Base URI of this form.
   *
   * @return the base URI used for composing subject identifiers
   */
  @SimpleProperty(category = PropertyCategory.LINKED_DATA,
      description = "<p>FormID is an autogenerated identifier for a form. It "
          + "is used in the generation of identifiers of object descriptions "
          + "created by this form when <code>AddDataFromLinkedDataForm</code> "
          + "is called on a <code>LinkedData</code> component. Setting "
          + "multiple forms to use the same FormID will allow them to change "
          + "the same set of objects.</p>")
  public String FormID() {
    return baseUri;
  }

  /**
   * Sets the property URI to link a parent form to this form.
   *
   * @param uri a property URI
   */
  @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_PROPERTY_URI)
  @SimpleProperty
  public void PropertyURI(String uri) {
    property = uri;
  }

  /**
   * Gets the Property URI for linking a parent form to this form.
   *
   * @return the form's property relative to its parent
   */
  @SimpleProperty(category = PropertyCategory.LINKED_DATA,
      description = "If the form is placed within another Linked Data Form, "
          + "the Property URI specifies the relationship between the object "
          + "described by the outer form and the object described by the "
          + "inner form. For example, there may be an outer form of type "
          + "<a href='http://xmlns.com/foaf/spec/#term_Person' "
          + "target='_new'>foaf:Person</a> with an inner form of type "
          + "<a href='http://www.w3.org/TR/vcard-rdf/#d4e1126' "
          + "target='_new'>vcard:Address</a>. One could specify that the "
          + "Property URI on the Address form is vcard:hasAddress, indicating "
          + "that the Person described in the outer form has the address "
          + "described by the inner form. If the form has no outer form, then "
          + "the Property URI is ignored.")
  public String PropertyURI() {
    return property;
  }

  /**
   * Sets a Subject URI this form describes.
   *
   * @param uri a subject URI
   */
  @SimpleProperty
  public void Subject(String uri) {
    subject = uri;
  }

  /**
   * Gets the Subject URI for this form.
   *
   * @return the subject URI set, if any.
   */
  @SimpleProperty(category = PropertyCategory.LINKED_DATA,
      description = "<p>By default, the use of a form results in a new "
          + "description of an object. Setting the Subject property to a "
          + "specific Uniform Resource Identifier (URI) will cause the form to "
          + "write its description out as if it were talking about the "
          + "existing resource rather than a new resource. This is useful for "
          + "building an application for editing existing structured "
          + "content.</p>")
  public String Subject() {
    return subject;
  }

  /**
   * Sets if this form's property should be made the subject of a triple and its container the object.
   *
   * @param inverse true if the form should be the subject of the statement with its parent, otherwise
   *                false to make it the object of the statement (the default)
   */
  @DesignerProperty(editorType = PropertyTypeConstants.PROPERTY_TYPE_BOOLEAN,
      defaultValue = "False")
  @SimpleProperty
  public void InverseProperty(boolean inverse) {
    this.inverse = inverse;
  }

  /**
   * Gets whether or not this form represents an inverse property.
   *
   * @return true if the form represents the subject of a triple with its parent, otherwise false
   */
  @SimpleProperty(category = PropertyCategory.LINKED_DATA,
      description = "<p>Inverse Property specifies whether the relationship "
          + "between the thing described by an outer form and the thing "
          + "described by an inner form should be reversed.</p><p>For example, "
          + "an application for movies may want to provide a method for "
          + "attributing a new movie to an existing director. However, "
          + "Schema.org's director property goes from a creative work to a "
          + "person. Using InverseProperty, one can start with a person and "
          + "attribute a new creative work (movie) to that person by choosing "
          + "the schema:director property and then setting InverseProperty to "
          + "True.</p>")
  public boolean InverseProperty() {
    return inverse;
  }

  /**
   * Returns a URI for the form either by examining its Subject property or
   * generated from its contents.
   * @return The empty string if no valid URL can be constructed for the form,
   * or a valid URI that can be used to represent the contents of the form.
   */
  @SimpleProperty(category = PropertyCategory.LINKED_DATA,
      description = "Provides a URI for the form even if SubjectURI is not set.")
  public String GenerateSubjectURI() {
    if(Subject().length() == 0) {
      String subj = RdfUtil.generateSubjectForForm(this);
      if(subj == null) {
        return "";
      } else {
        return subj;
      }
    } else {
      return Subject();
    }
  }
  
  @SimpleProperty
  public String generateRandomUUID() {
  	return UUID.randomUUID().toString();
  }

  /**
   * Populate the content of the form using information about resource identified by uri from the
   * linked data component.
   *
   * @param linkedData the source of the data for the model
   * @param uri the URI for the instance
   */
  @SimpleFunction
  public void FillFromLinkedData(LinkedDataBase<?> linkedData, String uri) {
    RdfUtil.detriplifyForm(this, uri, linkedData.getModel());
  }
}
